/* Colors */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* text over primary background */
/* Secondary: green */
/* text over secondary background */
/* Accent: orange */
/* text over accent background */
/* Brag: gold */
/* text over brag background */
/* Error: red */
/* text over brag background */
/* Good: green */
/* Warn: orange */
/* Bad: red */
/* Fancy: pink */
/* text over brag background */
/* Borders */
/* Shadows */
/* Widths */
/* Heights */
/* Orientations */
/* Aliases */
html {
  font-family: 'Noto Sans', Sans-Serif;
}

.site-title {
  font-family: 'Noto Sans';
}

h1,
h2,
h3,
h4 {
  font-family: 'Roboto';
}

.button {
  font-family: 'Roboto';
  font-weight: 600;
}

/* text printed directly on the page background deserves special treatment (transp theme) */
.button.button-empty:not(.disabled):hover, .button.button-empty.button-green:not(.disabled):hover, .button.button-empty.button-red:not(.disabled):hover, .button.button-metal {
  background: linear-gradient(to bottom, whitesmoke 0%, #ededed 100%);
  text-shadow: 0 1px 0 white;
}

.button.button-metal:not(.disabled):hover {
  background: linear-gradient(to bottom, #fafafa 0%, #f2f2f2 100%);
  text-shadow: 0 1px 0 white;
}

.button.active {
  box-shadow: 0 3px 4px rgba(0, 0, 0, 0.15) inset;
}

.button.active {
  background: #d64f00;
  color: #fff;
  text-shadow: 0 1px 1px black !important;
}

.button.active:not(.disabled):hover {
  background: #de7233;
}

.site-buttons .dropdown {
  box-shadow: -1px 5px 6px rgba(0, 0, 0, 0.3);
}

#reconnecting {
  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
}

.button, .button.button-empty:not(.disabled):hover {
  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.225);
}

.button:not(.disabled):hover {
  box-shadow: 0 4px 10px 0px rgba(0, 0, 0, 0.225);
}

.box-pad, .box:not(.box-pad) > h1 {
  padding: 5vh var(--box-padding);
}

.box__pad {
  padding: 0 var(--box-padding);
}

.box__top__actions {
  display: flex;
  flex-flow: row wrap;
}

.box__top__actions .button {
  /* extends %flex-wrap */
  display: flex;
  flex-flow: row wrap;
  align-items: center;
}

.site-buttons, #reconnecting {
  display: flex;
  flex-flow: row;
  align-items: center;
}

.box__top {
  /* extends %flex-center */
  display: flex;
  flex-flow: row wrap;
  align-items: center;
  justify-content: space-between;
}

input, textarea, select, .button {
  border-radius: 3px;
}

.box {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
}

html {
  box-sizing: border-box;
  min-height: 100%;
}

*, *::before, *::after {
  box-sizing: inherit;
  margin: 0;
  padding: 0;
}

body {
  background: #edebe9 linear-gradient(to bottom, #dbd7d1, #edebe9 116px) no-repeat;
  color: #4d4d4d;
  overflow-x: hidden;
}

a {
  color: #288ae6;
  text-decoration: none;
}

a:hover, a:active, a:focus {
  color: #0a5aa6;
}

p {
  margin-bottom: 1em;
}

em, i {
  font-style: normal;
}

li {
  list-style: none;
}

hr {
  margin: 1.5rem 0;
  border: 0;
  height: 1px;
  background: #d9d9d9;
}

small {
  font-size: .9em;
}

table, tbody, tfoot, thead, tr, th, td {
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: middle;
  text-align: inherit;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

button, input, optgroup, select, textarea {
  font: inherit;
  color: #4d4d4d;
  outline-color: #288ae6;
}

option,
optgroup {
  background: white;
  color: #1f1f1f;
}

input, textarea, select {
  background: #fafaf9;
  border: 1px solid #d9d9d9;
  padding: .6em 1em;
}

textarea {
  overflow: auto;
  resize: vertical;
  padding: .8em 1em;
}

button, a {
  cursor: pointer;
}

.copyable {
  background: #e3e3e3;
  color: #1f1f1f;
}

html {
  -webkit-font-smoothing: antialiased;
}

h1,
h2,
h3,
h4 {
  font-weight: normal;
  font-size: 1em;
}

body {
  --site-header-height: 40px;
  --site-header-margin: 0px;
  --main-margin: 0;
}

body.header-margin {
  --site-header-margin: 1em;
}

@media (min-width: 800px) {
  body {
    --main-margin: 1vw;
    margin-bottom: 2vmin;
  }
}

#main-wrap {
  display: grid;
  grid-template-areas: '. . main . .';
  --main-max-width: 1300px;
  grid-template-columns: var(--main-margin) 1fr minmax(auto, var(--main-max-width)) 1fr var(--main-margin);
  margin-top: var(--site-header-margin);
}

main {
  grid-area: main;
}

@media (max-width: 979px) {
  .topnav-toggle {
    display: block;
    position: absolute;
    top: -9999px;
    left: -9999px;
  }
  .hbg {
    position: absolute;
    top: 0;
    left: 0;
    width: var(--site-header-height);
    height: var(--site-header-height);
    cursor: pointer;
    z-index: 110;
  }
  .hbg__in {
    top: 50%;
    left: 8.5px;
    transition: transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }
  .hbg__in, .hbg__in::after, .hbg__in::before {
    display: block;
    margin-top: -1.5px;
    position: absolute;
    width: 23px;
    height: 2px;
    border-radius: 3px;
    background-color: #787878;
  }
  .hbg__in::after, .hbg__in::before {
    content: "";
  }
  .hbg__in::before {
    top: -6px;
    transition: top 0.1s 0.25s ease-in, opacity 0.1s ease-in;
  }
  .hbg__in::after {
    bottom: -7px;
    transition: bottom 0.1s 0.25s ease-in, transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }
  .topnav-toggle:checked ~ .hbg {
    position: fixed;
    background: white;
  }
  .topnav-toggle:checked ~ .hbg .hbg-in {
    transform: rotate(225deg);
    transition-delay: 0.12s;
    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  .topnav-toggle:checked ~ .hbg .hbg-in::before {
    top: 0;
    opacity: 0;
    transition: top 0.1s ease-out, opacity 0.1s 0.12s ease-out;
  }
  .topnav-toggle:checked ~ .hbg .hbg-in::after {
    bottom: 0;
    transform: rotate(-90deg);
    transition: bottom 0.1s ease-out, transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  #topnav {
    display: flex;
    flex-flow: row wrap;
    position: fixed;
    top: var(--site-header-height);
    bottom: 0;
    left: 0;
    background: white;
    transform: translateX(calc(-100% - 10px));
    transition: transform 200ms;
    padding-bottom: 1.2rem;
    overflow-y: auto;
    box-shadow: 2px 5px 7px rgba(0, 0, 0, 0.5);
    border-radius: 0 3px 0 0;
    max-width: 80%;
    z-index: 110;
  }
  #topnav a {
    color: #4d4d4d;
    text-decoration: none;
    padding: .7em 0;
    opacity: 0;
    transition: opacity 150ms;
  }
  #topnav section {
    flex: 1 0 50%;
    margin-top: 1rem;
  }
  #topnav section > a {
    font-size: 1.2em;
    padding-left: 1.2rem;
    font-weight: bold;
    display: block;
  }
  #topnav section .play {
    display: none;
  }
  #topnav section div {
    display: flex;
    flex-flow: column;
  }
  #topnav section div a {
    padding-left: 2.4rem;
  }
  #topnav section a:active {
    background: #288ae6;
    color: #fff;
  }
  .topnav-toggle:checked ~ #topnav {
    transform: translateX(0);
  }
  .topnav-toggle:checked ~ #topnav a {
    opacity: 1;
    transition: opacity 125ms ease-in-out 125ms;
  }
}

@media (min-width: 980px) {
  .hamburger,
  .topnav-mask,
  .topnav-toggle {
    display: none;
  }
  #topnav {
    --nav-section: 26px;
    --nav-section-hover: 35px;
    display: flex;
  }
  #topnav section {
    position: relative;
    height: var(--nav-section);
  }
  #topnav section > a {
    color: #5e5e5e;
    text-shadow: 0 1px 0 white;
    display: block;
    height: var(--nav-section);
    line-height: var(--site-header-height);
    padding: 0 0.7rem;
    text-transform: uppercase;
    border-left: 2px solid transparent;
  }
  #topnav section .home {
    display: none;
  }
  #topnav div {
    visibility: hidden;
    max-height: inherit;
    position: absolute;
    left: 0;
    background: white;
    min-width: 10rem;
    box-shadow: 2px 5px 6px rgba(0, 0, 0, 0.3);
    border-radius: 0 3px 3px 3px;
    border-left: 2px solid #288ae6;
  }
  #topnav div a {
    display: block;
    padding: .6rem .7rem;
    color: #4d4d4d;
  }
  #topnav div a:hover {
    background: #288ae6;
    color: #fff;
  }
  #topnav div a:first-child {
    border-radius: 0 3px 0 0;
  }
  #topnav div a:last-child {
    border-radius: 0 0 3px 1px;
  }
  #topnav.hover section:hover > a,
  #topnav section:active > a {
    height: var(--nav-section-hover);
    background: white;
    color: #4d4d4d;
    border-color: #288ae6;
  }
  #topnav.hover section:hover div,
  #topnav section:active div {
    visibility: visible;
    max-height: auto;
  }
}

.site-title {
  font-size: 25px;
  line-height: 37px;
  text-shadow: 0 1px 0 white;
  white-space: nowrap;
  margin: 0 .5rem;
  display: none;
}

@media (min-width: 500px) {
  .site-title {
    display: block;
  }
}

@media (max-width: 979px) {
  .site-title {
    margin-left: calc(.5rem + var(--site-header-height));
  }
}

.site-title a {
  color: #4d4d4d;
  text-decoration: none;
}

.site-title a:hover {
  color: #288ae6;
}

.site-title a:hover span {
  color: #4d9eea;
}

.site-title span {
  color: #787878;
}

.site-buttons .link, .site-buttons .toggle {
  display: block;
  height: var(--site-header-height);
  line-height: var(--site-header-height);
}

.site-buttons .link {
  color: #4d4d4d;
  font-size: 1.1rem;
  padding: 0 .7rem;
}

.site-buttons .link:hover {
  color: black;
}

.site-buttons .link span::before {
  vertical-align: middle;
}

.site-buttons .dropdown {
  display: none;
  position: absolute;
  right: 0;
  top: var(--dropdown-top);
  background: white;
}

.site-buttons .dropdown a,
.site-buttons .dropdown button {
  color: #4d4d4d;
}

.site-buttons .shown .toggle {
  background: white;
  color: #4d4d4d;
}

.site-buttons .shown .dropdown {
  display: block;
}

.site-buttons .signin {
  margin: 0 1rem;
}

#top {
  height: var(--site-header-height);
  display: flex;
  justify-content: space-between;
  position: relative;
  z-index: 106;
  max-width: 1800px;
  margin: 0 auto;
}

.site-title-nav {
  display: flex;
  justify-content: flex-start;
}

.box {
  background: white;
}

.box {
  --box-padding: 15px;
}

@media (min-width: 320px) {
  .box {
    --box-padding: calc(15px + 45 * ((100vw - 320px) / 880));
  }
}

@media (min-width: 1200px) {
  .box {
    --box-padding: 60px;
  }
}

.box-pad .box__top {
  padding: 0 0 var(--box-padding) 0;
}

.box__top {
  padding: calc(5vh - 1rem) var(--box-padding);
  /* flex gutters, waiting for row-gap to be implemented for flexbox.  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mastering_Wrapping_of_Flex_Items#Creating_gutters_between_items */
  /* end of flex gutter hack */
}

.box__top h1 {
  margin: 0;
}

.box__top > h1, .box__top > div, .box__top > form {
  margin-top: 1rem;
}

.box__top__actions {
  /* flex gutters, waiting for row-gap to be implemented for flexbox.  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mastering_Wrapping_of_Flex_Items#Creating_gutters_between_items */
  margin-left: -1rem;
  /* end of flex gutter hack */
}

.box__top__actions > * {
  margin-left: 1rem;
}

.box__top__actions > :not(:first-child) {
  margin-left: 1rem;
}

.box:not(.box-pad) > h1 {
  margin: 0;
}

@media (min-width: 800px) {
  .box {
    border-radius: 3px;
  }
}

.button {
  background: #288ae6;
  text-transform: uppercase;
  padding: .8em 1em;
  border: none;
  cursor: pointer;
  text-align: center;
  transition: all 150ms;
  white-space: nowrap;
}

.button, .button:visited {
  color: #fff;
}

.button:not(.disabled):hover {
  color: #fff;
  background: #489cea;
}

.button-no-upper {
  text-transform: none;
}

.button-thin {
  padding: .1em 1em;
  font-size: 90%;
}

.button-fat {
  font-size: 1.6rem;
}

.button-green {
  background: #629924;
}

.button-green:not(.disabled):hover {
  background: #6da928;
}

.button-red {
  background: #cc3333;
}

.button-red:not(.disabled):hover {
  background: #d76060;
}

.button.button-empty {
  transition: none;
  background: none;
  box-shadow: none;
}

.button.button-empty, .button.button-empty:hover {
  color: #288ae6;
}

.button.button-empty.button-red, .button.button-empty.button-red:hover {
  color: #cc3333;
}

.button.button-empty.button-green, .button.button-empty.button-green:hover {
  color: #629924;
}

.button.button-metal, .button.button-metal:hover {
  color: #787878;
}

.button.disabled {
  opacity: .5;
  cursor: not-allowed;
}

.button.active {
  color: #fff;
}

.button.active:not(.disabled):hover {
  color: #fff;
}

/* circular loader */
@keyframes spinner-rotate {
  100% {
    transform: rotate(360deg);
  }
}

@keyframes spinner-dash {
  0%, 10% {
    stroke-dasharray: 1,270;
    stroke-dashoffset: 0;
  }
  40% {
    stroke-dasharray: 89,240;
    stroke-dashoffset: 0;
  }
  100% {
    stroke-dasharray: 1,240;
    stroke-dashoffset: -110;
  }
}

@keyframes spinner-color {
  0%, 20%, 100% {
    stroke: #42a5f5;
  }
  30%, 45% {
    stroke: #f44336;
  }
  50%, 70% {
    stroke: #fdd835;
  }
  75%, 95% {
    stroke: #4caf50;
  }
}

.spinner {
  width: 70px;
  height: 70px;
  margin: auto;
}

.spinner svg {
  animation: spinner-rotate 1.5s linear infinite;
}

.spinner circle {
  stroke: #42a5f5;
  stroke-width: 4;
  animation: spinner-dash 1.275s ease-in-out infinite, spinner-color 5.1s linear infinite;
}

.white .spinner circle {
  animation: spinner-dash 1.275s ease-in-out infinite;
  stroke: #fff;
}

/* small horizontal loader */
@keyframes ddloader {
  0% {
    background-position: left;
  }
  100% {
    background-position: right;
  }
}

.ddloader {
  background: img-url("loader/blackx1.png") no-repeat;
  animation: ddloader 0.5s steps(15) infinite;
  vertical-align: middle;
  display: inline-block;
  width: 32px;
  height: 8px;
}

@keyframes reconnected {
  0% {
    opacity: 1;
    transform: translateY(0);
  }
  100% {
    opacity: 0;
    transform: translateY(2.5rem);
  }
}

#reconnecting {
  font-size: 1.2em;
  font-weight: bold;
  position: fixed;
  background: #cc3333;
  color: #fff;
  bottom: 0;
  left: 0;
  height: 2.5rem;
  padding: 0 1rem;
  border-top-right-radius: 3px;
  z-index: 105;
  opacity: 0;
  transform: translateY(2.5rem);
}

#reconnecting::before {
  font-size: 1.3em;
}

.offline #reconnecting {
  transform: translateY(0);
  opacity: 1;
}

.online.reconnected #reconnecting {
  background: #629924;
  animation: reconnected 2.5s ease-out 1.5s backwards;
}

.online #reconnecting::before {
  content: 'J';
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
