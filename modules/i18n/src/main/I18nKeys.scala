// Generated with bin/trans-dump.js
package oyun.i18n

import I18nDb.{ Site, Arena }

// format: OFF
object I18nKeys {

def untranslated(message: String) = new Untranslated(message)

val `createAGame` = new Translated("createAGame", Site)
val `createAMasa` = new Translated("createAMasa", Site)
val `viewMasa` = new Translated("viewMasa", Site)
val `backToMasa` = new Translated("backToMasa", Site)
val `theBestFreeOkeyServer` = new Translated("theBestFreeOkeyServer", Site)
val `siteDescription` = new Translated("siteDescription", Site)
val `masaFAQ` = new Translated("masaFAQ", Site)
val `newMasa` = new Translated("newMasa", Site)
val `masaHomeTitle` = new Translated("masaHomeTitle", Site)
val `masaHomeDescription` = new Translated("masaHomeDescription", Site)
val `join` = new Translated("join", Site)
val `invite` = new Translated("invite", Site)
val `withdraw` = new Translated("withdraw", Site)
val `inProgress` = new Translated("inProgress", Site)
val `play` = new Translated("play", Site)
val `playingRightNow` = new Translated("playingRightNow", Site)
val `standByX` = new Translated("standByX", Site)
val `quickPairing` = new Translated("quickPairing", Site)
val `playing` = new Translated("playing", Site)
val `finished` = new Translated("finished", Site)
val `players` = new Translated("players", Site)
val `activePlayers` = new Translated("activePlayers", Site)
val `games` = new Translated("games", Site)
val `gamesPlayed` = new Translated("gamesPlayed", Site)
val `ratingOverNbGames` = new Translated("ratingOverNbGames", Site)
val `points` = new Translated("points", Site)
val `nbWins` = new Translated("nbWins", Site)
val `nbLoss` = new Translated("nbLoss", Site)
val `freeOnlineOkey` = new Translated("freeOnlineOkey", Site)
val `chat` = new Translated("chat", Site)
val `chatRoom` = new Translated("chatRoom", Site)
val `spectatorRoom` = new Translated("spectatorRoom", Site)
val `spectators` = new Translated("spectators", Site)
val `toggleTheChat` = new Translated("toggleTheChat", Site)
val `talkInChat` = new Translated("talkInChat", Site)
val `createdBy` = new Translated("createdBy", Site)
val `by` = new Translated("by", Site)
val `allowAnon` = new Translated("allowAnon", Site)
val `winner` = new Translated("winner", Site)
val `cancel` = new Translated("cancel", Site)
val `variant` = new Translated("variant", Site)
val `standard` = new Translated("standard", Site)
val `yuzbirOkey` = new Translated("yuzbirOkey", Site)
val `duzOkey` = new Translated("duzOkey", Site)
val `duzokey` = new Translated("duzokey", Site)
val `yuzbir` = new Translated("yuzbir", Site)
val `roundsToPlay` = new Translated("roundsToPlay", Site)
val `rounds` = new Translated("rounds", Site)
val `roundX` = new Translated("roundX", Site)
val `seeAllMasas` = new Translated("seeAllMasas", Site)
val `openMasas` = new Translated("openMasas", Site)
val `masas` = new Translated("masas", Site)
val `theTable` = new Translated("theTable", Site)
val `more` = new Translated("more", Site)
val `mode` = new Translated("mode", Site)
val `rated` = new Translated("rated", Site)
val `casual` = new Translated("casual", Site)
val `custom` = new Translated("custom", Site)
val `ratedTable` = new Translated("ratedTable", Site)
val `casualTable` = new Translated("casualTable", Site)
val `leaderboard` = new Translated("leaderboard", Site)
val `oyunkeyfMasas` = new Translated("oyunkeyfMasas", Site)
val `masaNotFound` = new Translated("masaNotFound", Site)
val `masaDoesNotExist` = new Translated("masaDoesNotExist", Site)
val `masaMayHaveBeenCancelled` = new Translated("masaMayHaveBeenCancelled", Site)
val `masaTryRefreshingPage` = new Translated("masaTryRefreshingPage", Site)
val `createANewMasa` = new Translated("createANewMasa", Site)
val `playWithTheMachine` = new Translated("playWithTheMachine", Site)
val `refresh` = new Translated("refresh", Site)
val `lobby` = new Translated("lobby", Site)
val `returnToLobby` = new Translated("returnToLobby", Site)
val `returnToMasasHomepage` = new Translated("returnToMasasHomepage", Site)
val `youArePlaying` = new Translated("youArePlaying", Site)
val `joinTheGame` = new Translated("joinTheGame", Site)
val `spectateGame` = new Translated("spectateGame", Site)
val `playerHasJoinedTheGame` = new Translated("playerHasJoinedTheGame", Site)
val `playerHasLeftTheGame` = new Translated("playerHasLeftTheGame", Site)
val `thereIsAGameInProgress` = new Translated("thereIsAGameInProgress", Site)
val `yourTurn` = new Translated("yourTurn", Site)
val `nbSecondsToPlayTheFirstMove` = new Translated("nbSecondsToPlayTheFirstMove", Site)
val `waitingForOpponent` = new Translated("waitingForOpponent", Site)
val `gameOver` = new Translated("gameOver", Site)
val `gameEnded` = new Translated("gameEnded", Site)
val `gameAborted` = new Translated("gameAborted", Site)
val `gameFinished` = new Translated("gameFinished", Site)
val `gameMiddleFinished` = new Translated("gameMiddleFinished", Site)
val `gameEndBy` = new Translated("gameEndBy", Site)
val `sortSeries` = new Translated("sortSeries", Site)
val `sortPairs` = new Translated("sortPairs", Site)
val `openSeries` = new Translated("openSeries", Site)
val `openPairs` = new Translated("openPairs", Site)
val `openedSeries` = new Translated("openedSeries", Site)
val `openedPairs` = new Translated("openedPairs", Site)
val `collectOpen` = new Translated("collectOpen", Site)
val `leaveTaken` = new Translated("leaveTaken", Site)
val `uciDrawMiddle` = new Translated("uciDrawMiddle", Site)
val `uciDrawMiddlePiece` = new Translated("uciDrawMiddlePiece", Site)
val `uciDiscard` = new Translated("uciDiscard", Site)
val `uciCollectOpen` = new Translated("uciCollectOpen", Site)
val `uciLeaveTaken` = new Translated("uciLeaveTaken", Site)
val `uciDrawLeft` = new Translated("uciDrawLeft", Site)
val `uciOpenSeries` = new Translated("uciOpenSeries", Site)
val `uciOpenPairs` = new Translated("uciOpenPairs", Site)
val `uciDropOpenSeries` = new Translated("uciDropOpenSeries", Site)
val `uciDropOpenPairs` = new Translated("uciDropOpenPairs", Site)
val `uciDropOpenSeriesReplace` = new Translated("uciDropOpenSeriesReplace", Site)
val `uciDropOpenPairsReplace` = new Translated("uciDropOpenPairsReplace", Site)
val `hands` = new Translated("hands", Site)
val `scores` = new Translated("scores", Site)
val `replay` = new Translated("replay", Site)
val `openTables` = new Translated("openTables", Site)
val `inProgressTables` = new Translated("inProgressTables", Site)
val `completed` = new Translated("completed", Site)
val `home` = new Translated("home", Site)
val `anonymous` = new Translated("anonymous", Site)
val `east` = new Translated("east", Site)
val `west` = new Translated("west", Site)
val `north` = new Translated("north", Site)
val `south` = new Translated("south", Site)
val `aiBot` = new Translated("aiBot", Site)
val `aiName` = new Translated("aiName", Site)
val `inviteBot` = new Translated("inviteBot", Site)
val `resign` = new Translated("resign", Site)
val `emptySeat` = new Translated("emptySeat", Site)
val `settings` = new Translated("settings", Site)
val `playOnline` = new Translated("playOnline", Site)
val `nbPlayers` = new Translated("nbPlayers", Site)
val `nbRounds` = new Translated("nbRounds", Site)
val `faq` = new Translated("faq", Site)
val `search` = new Translated("search", Site)
val `waitingPlayers` = new Translated("waitingPlayers", Site)
val `gameEndByHand` = new Translated("gameEndByHand", Site)
val `gameEndByPair` = new Translated("gameEndByPair", Site)
val `gameEndByDiscardOkey` = new Translated("gameEndByDiscardOkey", Site)
val `handZero` = new Translated("handZero", Site)
val `handOkeyLeft` = new Translated("handOkeyLeft", Site)
val `handNotOpened` = new Translated("handNotOpened", Site)
val `handOpenedPair` = new Translated("handOpenedPair", Site)
val `handOpenedSome` = new Translated("handOpenedSome", Site)
val `reconnecting` = new Translated("reconnecting", Site)
val `signIn` = new Translated("signIn", Site)
val `signUp` = new Translated("signUp", Site)
val `community` = new Translated("community", Site)
val `contact` = new Translated("contact", Site)
val `forum` = new Translated("forum", Site)
val `questionsAndAnswers` = new Translated("questionsAndAnswers", Site)
val `lastPost` = new Translated("lastPost", Site)
val `posts` = new Translated("posts", Site)
val `topics` = new Translated("topics", Site)
val `views` = new Translated("views", Site)
val `replies` = new Translated("replies", Site)
val `reply` = new Translated("reply", Site)
val `replyToThisTopic` = new Translated("replyToThisTopic", Site)
val `createANewTopic` = new Translated("createANewTopic", Site)
val `subject` = new Translated("subject", Site)
val `message` = new Translated("message", Site)
val `createTheTopic` = new Translated("createTheTopic", Site)
val `inbox` = new Translated("inbox", Site)
val `preferences` = new Translated("preferences", Site)
val `profile` = new Translated("profile", Site)
val `logOut` = new Translated("logOut", Site)
val `online` = new Translated("online", Site)
val `offline` = new Translated("offline", Site)
val `networkLagBetweenYouAndOyunkeyf` = new Translated("networkLagBetweenYouAndOyunkeyf", Site)
val `timeToProcessAMoveOnOyunkeyfServer` = new Translated("timeToProcessAMoveOnOyunkeyfServer", Site)
val `newToOyunkeyf` = new Translated("newToOyunkeyf", Site)
val `forgotPassword` = new Translated("forgotPassword", Site)
val `passwordReset` = new Translated("passwordReset", Site)
val `email` = new Translated("email", Site)
val `password` = new Translated("password", Site)
val `username` = new Translated("username", Site)
val `usernameOrEmail` = new Translated("usernameOrEmail", Site)
val `usernameAlreadyUsed` = new Translated("usernameAlreadyUsed", Site)
val `textIsTooShort` = new Translated("textIsTooShort", Site)
val `textIsTooLong` = new Translated("textIsTooLong", Site)
val `invalidCaptcha` = new Translated("invalidCaptcha", Site)
val `haveAnAccount` = new Translated("haveAnAccount", Site)
val `changePassword` = new Translated("changePassword", Site)
val `changeEmail` = new Translated("changeEmail", Site)
val `checkYourEmail` = new Translated("checkYourEmail", Site)
val `termsOfService` = new Translated("termsOfService", Site)
val `youNeedAnAccountToDoThat` = new Translated("youNeedAnAccountToDoThat", Site)
val `computersAreNotAllowedToPlay` = new Translated("computersAreNotAllowedToPlay", Site)
val `byRegisteringYouAgreeToBeBoundByOur` = new Translated("byRegisteringYouAgreeToBeBoundByOur", Site)
val `weHaveSentYouAnEmailClickTheLink` = new Translated("weHaveSentYouAnEmailClickTheLink", Site)
val `ifYouDoNotSeeTheEmailCheckOtherPlaces` = new Translated("ifYouDoNotSeeTheEmailCheckOtherPlaces", Site)
val `memberSince` = new Translated("memberSince", Site)
val `membersOnly` = new Translated("membersOnly", Site)
val `lastSeenActive` = new Translated("lastSeenActive", Site)
val `tpTimeSpentPlaying` = new Translated("tpTimeSpentPlaying", Site)
val `nbConnectedPlayers` = new Translated("nbConnectedPlayers", Site)
val `onlinePlayers` = new Translated("onlinePlayers", Site)
val `nbGamesInPlay` = new Translated("nbGamesInPlay", Site)
val `isOyunkeyfLagging` = new Translated("isOyunkeyfLagging", Site)
val `playOkeyEverywhere` = new Translated("playOkeyEverywhere", Site)
val `oyunkeyfIsUnreachable` = new Translated("oyunkeyfIsUnreachable", Site)
val `siteUpdateInProgress` = new Translated("siteUpdateInProgress", Site)
val `siteUpdateComplete` = new Translated("siteUpdateComplete", Site)
val `okeyPlayersAndLeaderboards` = new Translated("okeyPlayersAndLeaderboards", Site)
val `bestOkeyPlayersInYuzbir` = new Translated("bestOkeyPlayersInYuzbir", Site)
val `aboutX` = new Translated("aboutX", Site)
val `mobileApp` = new Translated("mobileApp", Site)
val `todo` = new Translated("todo", Site)
val `underConstruction` = new Translated("underConstruction", Site)

object arena {
val `isItRated` = new Translated("isItRated", Arena)
val `willBeNotified` = new Translated("willBeNotified", Arena)
val `someRated` = new Translated("someRated", Arena)
val `howAreScoresCalculated` = new Translated("howAreScoresCalculated", Arena)
val `howAreScoresCalculatedAnswer` = new Translated("howAreScoresCalculatedAnswer", Arena)
val `earlyPlayerCantScore` = new Translated("earlyPlayerCantScore", Arena)
val `howIsTheWinnerDecided` = new Translated("howIsTheWinnerDecided", Arena)
val `howIsTheWinnerDecidedAnswer` = new Translated("howIsTheWinnerDecidedAnswer", Arena)
val `howDoesThePairingWork` = new Translated("howDoesThePairingWork", Arena)
val `howDoesThePairingWorkAnswer` = new Translated("howDoesThePairingWorkAnswer", Arena)
val `howDoesItEnd` = new Translated("howDoesItEnd", Arena)
val `howDoesItEndAnswer` = new Translated("howDoesItEndAnswer", Arena)
val `otherRules` = new Translated("otherRules", Arena)
val `otherRulesAnswer` = new Translated("otherRulesAnswer", Arena)
}

}
